// Place all the behaviors and hooks related to the matching controller here.
// All this logic will automatically be available in application.js.
// You can use CoffeeScript in this file: http://coffeescript.org/
$(function(){

//*** JS OBJECTS and PROTOTYPES ***//

  //Javascript Model Objects and prototype for Game
  class Game {
    constructor(data) {
      this.id = data.id;
      this.capacity = data.capacity;
      this.status = data.game_status;
      this.players = data.players;
      this.nights = data.nights;
      this.characters = data.characters;
      this.lastNightId = data.nights[data.nights.length - 1].id;
    }
    
    lastNight() {
      let nights = this.nights;
      let gameId = this.id;
      let lastNight = new Night(nights[nights.length - 1], gameId);
      return lastNight;
    }
    
    end() {
      let status = this.status
      if (status === "stillplaying") {
        return false;
      } else {
        return true;
      }
    }
    
    renderResult() {
      let result = this.status;
      $("div#gameStatus h2").html("GAME OVER");  
      if(result === "mafia") {
        $("div#result h3").html("Mafia Won!");
      } else {
        $("div#result h3").html("Good People Won!");
      }
      let gameId = this.id;
      let nights = this.nights.map((night) => {return new Night(night, gameId)});
      let resulttemplate = HandlebarsTemplates['gameresult'];
      $("div#nightRoundup").hide().html(resulttemplate(nights));
    }
    
    buildEditNightForm() {
      let editNightFormTemplate = HandlebarsTemplates['editnight'];
      return editNightFormTemplate(this);
    }
    
    buildNewNightForm() {
      let {players, characters, id} = this; 
      let gamenight = {gameId: id, aliveCharacters: this.aliveCharacters(players, characters)};
      let newNightFormTemplate = HandlebarsTemplates['newnight'];
      return newNightFormTemplate(gamenight); 
    }
    
    aliveCharacters(players, characters) {
      
      let findAliveCharacters = (players, characters) => {
        let alivePlayers = [];
        let aliveCharacters = [];
        
        players.forEach((player) => { 
          if(player.alive) {
            alivePlayers.push(player);  
          }
        });
        
        characters.forEach((character) => {
          let characterId = character.id;
          const cId = (alivePlayer) => {
            return alivePlayer.character_id === characterId;
           }
          if(alivePlayers.find(cId) && !!character.ability) {
            aliveCharacters.push(character);
          }
        });
        
        return aliveCharacters;
      }
      
      let sortById = (array, key) => {
        return array.sort((a, b) => {
          let x = a[key]; let y = b[key];
          return ((x < y) ? -1 : ((x > y) ? 1 : 0));
        });
      }
      
      return sortById(findAliveCharacters(players, characters), "id").map((c)=>{
        return {name: c.name, ability:c.ability, players: players}
      })
      
    }
  }

  //Javascript Model Objects and prototype for Night
  class Night {
    constructor(night, gameId) {
      this.id = night.id;
      this.logs = night.logs.split(".");
      this.notes = night.notes.split(".");
      this.gameId = gameId;
    }
    
    renderLastNight() {
      let aboutLastNight = HandlebarsTemplates['lastnightnotes'](this);
      return aboutLastNight;
    }
  }


//*** Handlebars Custom Helpers ***//
  Handlebars.registerHelper('winner', function() {
    if(this.game_status === "good_people") {
      return new Handlebars.SafeString("Good People Won")
    } else if(this.game_status === "mafia") {
      return new Handlebars.SafeString("Mafia Won")
    } else {
      return new Handlebars.SafeString("<span style='color:#f85c37;'>PLAYING<span>")
    }
  })

  Handlebars.registerHelper("counter", (index) => {
    return index + 1;
  });


//*** ANIMATIONS and AJAX CALLS ***//

  // Menu settings
  $('#menuToggle, .menu-close').on('click', () => {
    $('#menuToggle').toggleClass('active');
    $('body').toggleClass('body-push-toleft');
    $('#theMenu').toggleClass('menu-open');
  });

  // hide buttons and show hidden form
  $("a#new_game").click((e) => {
    $("div.buttons").fadeOut("slow", () => {
      $("div.hiddenform").fadeIn("slow");
    });    
    e.preventDefault();
  });

  // ajax call for all current user's games and show result
  $("a#all_games").click((e) => {
    e.preventDefault();
    let $games = $("div#hiddengames");

    $.ajax({
      method: "GET",
      url: "/games",
      dataType: "json"
    })
      .done((data) => {
        let template = HandlebarsTemplates['allgames'];
        $games.html(template(data));
        $("div.buttons").fadeOut("slow", () => {
          $("div#hiddengames").fadeIn("slow");
        });
      });
  });
  
  //going back from games field to toggled away buttons
  $("div#hiddengames").on("click", "button", () => {
    $("div#hiddengames").fadeOut("slow", () => {
      $("div.buttons").fadeIn("slow");
    });
  });

  // change html background-image based on night or day.
  let changeBackgroundImage = (src) => {
    let $img = $( '<img src="' + src + '">' );
    $img.bind( 'load', () => {
      $("html").css({"background-image": "url(" + src + ")"});
    } );
    if( $img[0].width ){ $img.trigger( 'load' ); }
  }
  
  // submit the new night form with ajax post request
  $("#new_night_form").on("submit", "form", (e) => {
    e.preventDefault();
    // preload image to prevent browser flicker and change background image
    let src = "<%= asset_path('sea.jpg') %>"
    changeBackgroundImage(src);
    
    // reset the html of the areas that will have info being rendered after ajax call.
    $("div#edit_night_form").html("");
    $("div#aboutLastNight").html(""); 

    //ajax call
    let $form = $(e.currentTarget);
    let action = $form.attr("action");
    let params = $form.serialize();
    $.ajax({
      url: action,
      data: params,
      dataType: "json",
      method: "POST"
    })
      .done((data) => {
        let game = new Game(data);
        let lastNight = game.lastNight();
        let aboutLastNight = lastNight.renderLastNight();
        $("div#aboutLastNight").html(aboutLastNight); 
        if (game.end()){
          game.renderResult(); 
          $("div#newnight_field").fadeOut("slow", () => {
            $("div#result").fadeIn("slow", () => {
              $("div#nightRoundup").fadeIn(300);
            });
          });
        } else {
          let editFormHtml = game.buildEditNightForm();
          $("div#edit_night_form").html(editFormHtml);
          // fade out the new night form, and fade in the edit night form
          $("div#newnight_field").fadeOut("slow", () => {
            $("div#editnight_field").fadeIn("slow");
          });
        }
    });
  });

  // getting last night logs through ajax get request
  $("#aboutLastNight").on("click", "a", (e) => {
    e.preventDefault();
    var $a = $(e.currentTarget)[0];
    $.ajax({
      url: $a.href,
      method: "GET",
      dataType: "json"
    })
      .done((data) => {
        let logs = data.logs.split(".");
        let logtemplate = HandlebarsTemplates['nightlogs'];
        $("#logs").html("");
        $("#logs").hide().html(logtemplate(logs)).fadeIn("slow");
    });
  });

  //toggle night logs for each night in nightRoundups
  $("#nightRoundup").on("click", "div.toggleB", (e) => {
    $(e.currentTarget).next().slideToggle(600);
  });

  //submit the edit night form with ajax post request
  $("#edit_night_form").on("submit", "form", (e) => {
    e.preventDefault();

    // preload image to prevent browser flicker and change background image
    let src = "<%= asset_path('night.jpg') %>"
    changeBackgroundImage(src);
    
    // reset the html of the areas that will have info being rendered after ajax call.
    $("div#new_night_form").html("");
    $("div#aboutLastNight").html(""); 
    
    // ajax call
    let $form = $(e.currentTarget);
    let action = $form.attr("action");
    let params = $form.serialize();
    $.ajax({
      url: action,
      data: params,
      dataType: "json",
      method: "POST" 
    })
      .done((data) => {
        let game = new Game(data);
        if (game.end()){
          game.renderResult(); 
          $("div#editnight_field").fadeOut("slow", () => {
            $("div#result").fadeIn("slow", () => {
              $("div#nightRoundup").fadeIn(300);
            });
          });
        } else {
          let newFormHtml = game.buildNewNightForm();
          $("div#new_night_form").html(newFormHtml);
          // fade out the edit night form, and fade in the new night form
          $("div#editnight_field").fadeOut("slow", () => {
            $("div#newnight_field").fadeIn("slow");
          });
        }
        let lastNight = game.lastNight();
        let aboutLastNight = lastNight.renderLastNight();
        $("div#aboutLastNight").html(aboutLastNight);
    });
  });
});
